{"version":3,"sources":["Controllers.js"],"names":["regModel","require","courseModel","courses","registerController","req","res","next","body","username","email","password","role","user","create","status","json","message","error","loginController","findOne","userExist","AdminEmail","redirect","UserEmail","adminController","find","students","console","log","instructor","userController","map","course","send","id","name","type","duration","price","module","exports"],"mappings":"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","sourcesContent":["const regModel = require('../models/registrationModel.js')\r\nconst courseModel = require('../models/registrationModel.js')\r\nconst courses = require('../courses.js')\r\n\r\n\r\n\r\n\r\nconst registerController = (req,res,next)=>{\r\n    try {\r\n        const {username, email, password, role} = req.body\r\n        const user = regModel.create({\r\n            username:username,\r\n            email:email,\r\n            password:password,\r\n            role:role\r\n        })\r\n        res.status(201).json({message:\"user created successfully\"})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Error while creating user\",error})\r\n    }\r\n\r\n}\r\n\r\nconst loginController = async(req,res,next)=>{\r\n    try {\r\n        const {email, password,role} = req.body\r\n        const userExist = await regModel.findOne({email})\r\n        if(userExist.password == password && role === 'Admin'){\r\n            req.AdminEmail = email\r\n            res.redirect('/admin')\r\n        }\r\n        else if(userExist.password == password && role === 'User' ){\r\n            req.UserEmail = email\r\n            res.redirect('/user')\r\n        }\r\n        else{\r\n            res.status(404).json({message:\"User not found\"})\r\n        }\r\n    } catch (error) {\r\n        res.status(404).json({\r\n            message:\"user not found\"\r\n        })\r\n    }\r\n}\r\nconst adminController = async(req,res,next)=>{\r\n    const students = await regModel.find({role:\"User\"})\r\n    console.log(students)\r\n    const instructor = await regModel.find({role:\"Instructor\"})\r\n    console.log(instructor)\r\n    res.status(200).json({user:students, instructor})\r\n}\r\nconst userController = async(req,res,next)=>{\r\n    courses.map((course)=>{\r\n        res.send(\r\n            `<ul>\r\n            <li>${course.id}</li>\r\n            <li>${course.name}</li>\r\n            <li>${course.type}</li>\r\n            <li>${course.duration}</li>\r\n            <li>${course.price}</li>\r\n            </ul>`)\r\n    })\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    registerController,\r\n    loginController,\r\n    userController,\r\n}"],"file":"Controllers.dev.js"}