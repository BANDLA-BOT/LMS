{"version":3,"sources":["admin.js"],"names":["router","require","Router","registerModel","studentModel","courseModel","post","req","res","next","body","email","password","role","findOne","admin","json","message","error","get","find","students","instructors","courses","status","id","params","console","log","deleteOne","_id","user","student","module","exports"],"mappings":"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","sourcesContent":["const router = require('express').Router();\r\nconst {registerModel, studentModel, courseModel} = require('../models/registrationModel.js')\r\n\r\n\r\n//Admin login\r\n\r\nrouter.post('/login', async(req,res,next)=>{\r\n    try {\r\n    const {email,password,role} = req.body\r\n    const admin = await registerModel.findOne({role:role, email:email, password:password})\r\n    if(!admin){\r\n        res.json({message:\"No user found \"})\r\n    }\r\n    res.json({message:\"Admin logged in successfully\", admin :admin})\r\n    } catch (error) {\r\n        res.json({error:error.message, message:\"Internal server error\"})\r\n    }\r\n})\r\n\r\n//Admin can access all the user details\r\n\r\nrouter.get('/getall', async(req,res)=>{\r\n    try {\r\n        const students = await studentModel.find()\r\n        const instructors = await registerModel.find({role:\"instructor\"})\r\n        const courses = await courseModel.find()\r\n        if(!students){\r\n            res.json({message:\"No Students found in DB\"})\r\n        }\r\n        if(!instructors){\r\n            res.json({message:\"No instructors found in DB\"})\r\n        }\r\n        if(!courses){\r\n            res.json({message:\"No instructors found in DB\"})\r\n        }\r\n        res.json({students:students, instructors:instructors, courses:courses})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\"})\r\n    }\r\n})\r\n\r\n//Admin can delete a user \r\n\r\nrouter.delete('/deleteuser/:id', async(req,res)=>{\r\n    try {\r\n        const id = req.params.id\r\n        console.log(id)\r\n        const user = await registerModel.deleteOne({_id:id})\r\n        const student = await studentModel.deleteOne({_id:id})\r\n        res.json({message:\"user\", user, student:student})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\"})\r\n    }\r\n})\r\nmodule.exports = router"],"file":"admin.dev.js"}