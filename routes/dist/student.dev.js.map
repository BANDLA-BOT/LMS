{"version":3,"sources":["student.js"],"names":["router","require","Router","validate","jwt","registerModel","courseModel","post","req","res","next","body","email","password","findOne","role","student","token","sign","user","username","id","_id","process","env","SECRET_KEY","expiresIn","json","message","error","params","courseId","userId","findById","course","status","courseDetails","push","save","err","get","find","put","updateOne","$set","module","exports"],"mappings":"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","sourcesContent":["const router = require(\"express\").Router();\r\nconst validate = require('../config/verifyToken.js')\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst {\r\n  registerModel,\r\n  courseModel,\r\n} = require(\"../models/registrationModel.js\");\r\n\r\n\r\n\r\nrouter.post(\"/login\", async (req, res, next) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const student = await registerModel.findOne({\r\n      email: email,\r\n      password: password,\r\n      role: \"student\",\r\n    });\r\n    if (student) {\r\n      const token = jwt.sign({\r\n        user: {\r\n          username: student.username,\r\n          email: student.email,\r\n          id: student._id,\r\n          role: student.role,\r\n        },\r\n      },\r\n      process.env.SECRET_KEY,{expiresIn:\"3m\"}\r\n    );\r\n\r\n      res.json({ message: \"Student logged in successfully\", student, token:token });\r\n    } else if (!student) {\r\n      res.json({ message: \"No student found\" });\r\n    }\r\n  } catch (error) {\r\n    res.json({ message: \"Error while login\", error });\r\n  }\r\n});\r\nrouter.post(\"/course/:courseId/:userId\", async (req, res) => {\r\n  try {\r\n    const {courseId,userId} = req.params\r\n    const user = await registerModel.findById(userId)\r\n    const course = await courseModel.findById(courseId);\r\n    if(!user ||  !course){\r\n      return res.status(400).json ({message:\"User/Course not found \"})\r\n    }\r\n    user.courseDetails.push(course._id)\r\n    await user.save()\r\n    res.status(200).json({message:\"Course added to user \", user})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", err:error.message})\r\n  }\r\n});\r\nrouter.get(\"/profile\", validate, async (req, res) => {\r\n  const course = await courseModel.find();\r\n  res.json({ message: \"fetched\", course });\r\n});\r\nrouter.put(\"/update/:id\", async (req, res) => {\r\n  const { email, password, role,username } = req.body;\r\n  const id = req.params.id;\r\n  const user = await registerModel.updateOne(\r\n    { _id: id },\r\n    { $set: { email: email, password: password, role: role,username:username} }\r\n  );\r\n  res.json({ message: \"updated successfully\", user });\r\n});\r\n\r\nmodule.exports = router;\r\n"],"file":"student.dev.js"}