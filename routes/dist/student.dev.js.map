{"version":3,"sources":["student.js"],"names":["router","require","Router","validate","path","jwt","registerModel","courseModel","wishlistModel","multer","post","req","res","next","body","email","password","findOne","role","student","token","sign","user","username","id","_id","profile","process","env","SECRET_KEY","expiresIn","json","message","error","params","courseId","userId","findById","course","status","purchases","push","save","err","get","console","log","find","courses","coursetype","free","paid","FreeCourses","PaidCourses","put","updateOne","$set","query","q","$or","coursename","$regex","$options","instructor","Courses","Id","wishlist","list","studentUsername","studentEmail","studentId","wishList","module","exports"],"mappings":"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","sourcesContent":["const router = require(\"express\").Router();\r\nconst validate = require('../config/verifyToken.js')\r\nconst path = require('path')\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst {\r\n  registerModel,\r\n  courseModel,\r\n  wishlistModel,\r\n} = require(\"../models/registrationModel.js\");\r\nconst multer = require(\"multer\");\r\n\r\n\r\nrouter.post(\"/login\", async (req, res, next) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const student = await registerModel.findOne({\r\n      email: email,\r\n      password: password,\r\n      role: \"student\",\r\n    });\r\n    if (student) {\r\n      const token = jwt.sign({\r\n        user: {\r\n          username: student.username,\r\n          email: student.email,\r\n          id: student._id,\r\n          profile:student.profile,\r\n          role: student.role,\r\n        },\r\n      },\r\n      process.env.SECRET_KEY,{expiresIn:\"1h\"}\r\n    );\r\n\r\n      res.json({ message: \"Student logged in successfully\", student, token:token });\r\n    } else if (!student) {\r\n      res.json({ message: \"No student found\" });\r\n    }\r\n  } catch (error) {\r\n    res.json({ message: \"Error while login\", error });\r\n  }\r\n});\r\n\r\nrouter.post(\"/purchase/:courseId/:userId\", validate, async (req, res) => {\r\n  try {\r\n    const {courseId,userId} = req.params\r\n    const user = await registerModel.findById(userId)\r\n    const course = await courseModel.findById(courseId);\r\n    if(!user ||  !course){\r\n      return res.status(400).json ({message:\"User/Course not found \"})\r\n    }\r\n    user.purchases.push(course)\r\n    await user.save()\r\n    res.status(200).json({message:\"Course added to user \", user})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", err:error.message})\r\n  }\r\n});\r\n\r\n\r\nrouter.get(\"/profile\", validate, async (req, res) => {\r\n  const user = req.user\r\n  console.log(user)\r\n  const course = await courseModel.find()\r\n  res.json({message:\"Courses available are\", courses:course})\r\n});\r\n\r\nrouter.get('/categories', validate, async(req,res)=>{\r\n  const user = req.user\r\n  console.log(user)\r\n  const free = await courseModel.find({coursetype:'free'});\r\n  const paid = await courseModel.find({coursetype:\"paid\"})\r\n  res.json({ message: \"fetched\",user:user, FreeCourses:free, PaidCourses:paid });\r\n})\r\n\r\nrouter.put(\"/update/:id\", async (req, res) => {\r\n  const { email, password,username } = req.body;\r\n  const id = req.params.id;\r\n  const user = await registerModel.updateOne(\r\n    { _id: id },\r\n    { $set: { email: email, password: password,username:username} }\r\n  );\r\n  res.json({ message: \"updated successfully\", user });\r\n});\r\n\r\nrouter.get('/search/filter',async(req,res)=>{\r\n  try {\r\n      const query = req.query.q;\r\n      const course = await courseModel.find({\r\n          $or: [\r\n              { coursename: { $regex: query, $options: 'i' }},\r\n          ]\r\n      });\r\n      const instructor = await registerModel.find({\r\n          $or:[\r\n              {username:{$regex:query, $options:'i'}}\r\n          ]\r\n      })\r\n      res.json({message:\"found results\", Courses:course,instructor:instructor});\r\n  } catch (error) {\r\n      res.status(500).json({ message: 'Error While searching', error });\r\n  }\r\n})\r\n\r\n//wishlist\r\n\r\nrouter.post('/wishlist/:Id', validate, async(req,res)=>{\r\n  try {\r\n    const user = req.user\r\n    console.log(user.user.username)\r\n    const _id = req.params.Id\r\n    const course = await courseModel.findById({_id:_id})\r\n    console.log(course)\r\n    const wishlist = new wishlistModel({\r\n        list:course,\r\n        studentUsername:user.user.username,\r\n        studentEmail:user.user.email,\r\n        studentId:user.user.id\r\n    })\r\n    await wishlist.save()\r\n    res.json({message:\"wishlist created \", wishlist:wishlist})\r\n  } catch (error) {\r\n    res.json({error:error.message, error:\"Error occured while creating wishlist\"})\r\n  }\r\n})\r\nrouter.get('/getwishlist', validate, async(req,res)=>{\r\n  const wishList = await wishlistModel.find()\r\n  res.json({wishlist:wishList})\r\n})\r\nrouter.get('/certification', validate, async(req,res)=>{\r\n    const user = req.user\r\n    console.log(user)\r\n    const username = user.user.username\r\n    const email = user.user.email\r\n    console.log(username)\r\n    console.log(email)\r\n    const student = await registerModel.findOne({email:email, username:username})\r\n    console.log(student.purchases)\r\n})\r\n\r\n\r\nmodule.exports = router;\r\n"],"file":"student.dev.js"}