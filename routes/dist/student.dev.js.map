{"version":3,"sources":["student.js"],"names":["router","require","Router","validate","jwt","registerModel","courseModel","studentModel","post","req","res","body","username","email","password","newStudent","save","json","message","StudenDetails","error","next","findOne","student","token","sign","user","id","_id","profile","process","env","SECRET_KEY","expiresIn","params","courseId","studentId","findById","course","console","log","status","purchases","push","err","get","find","studentName","studentMail","courses","coursetype","free","paid","FreeCourses","PaidCourses","put","updateOne","$set","query","q","$or","coursename","$regex","$options","instructor","Courses","wishlist","list","completed","findOneAndUpdate","completedCourses","filter","module","exports"],"mappings":";;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,MAAnB,EAAf;;AACA,IAAMC,QAAQ,GAAGF,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAMG,GAAG,GAAGH,OAAO,CAAC,cAAD,CAAnB;;eAKIA,OAAO,CAAC,gCAAD,C;IAHTI,a,YAAAA,a;IACAC,W,YAAAA,W;IACAC,Y,YAAAA,Y,EAIF;;;AAEAP,MAAM,CAACQ,IAAP,CAAY,WAAZ,EAAyB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEiBD,GAAG,CAACE,IAFrB,EAEbC,QAFa,aAEbA,QAFa,EAEHC,KAFG,aAEHA,KAFG,EAEIC,QAFJ,aAEIA,QAFJ;AAGfC,UAAAA,UAHe,GAGF,IAAIR,YAAJ,CAAiB;AAClCK,YAAAA,QAAQ,EAAEA,QADwB;AAElCE,YAAAA,QAAQ,EAAEA,QAFwB;AAGlCD,YAAAA,KAAK,EAAEA;AAH2B,WAAjB,CAHE;AAAA;AAAA,0CAQfE,UAAU,CAACC,IAAX,EARe;;AAAA;AASrBN,UAAAA,GAAG,CAACO,IAAJ,CAAS;AACPC,YAAAA,OAAO,EAAE,kCADF;AAEPC,YAAAA,aAAa,EAAEJ;AAFR,WAAT;AATqB;AAAA;;AAAA;AAAA;AAAA;AAcrBL,UAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEG,YAAAA,KAAK,EAAE,YAAMF;AAAf,WAAT;;AAdqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB,E,CAkBA;;AAEAlB,MAAM,CAACQ,IAAP,CAAY,QAAZ,EAAsB,kBAAOC,GAAP,EAAYC,GAAZ,EAAiBW,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEUZ,GAAG,CAACE,IAFd,EAEVE,KAFU,cAEVA,KAFU,EAEHC,QAFG,cAEHA,QAFG;AAAA;AAAA,0CAIIP,YAAY,CAACe,OAAb,CAAqB;AACzCT,YAAAA,KAAK,EAAEA,KADkC;AAEzCC,YAAAA,QAAQ,EAAEA;AAF+B,WAArB,CAJJ;;AAAA;AAIZS,UAAAA,OAJY;;AAQlB,cAAIA,OAAJ,EAAa;AACLC,YAAAA,KADK,GACGpB,GAAG,CAACqB,IAAJ,CACZ;AACEC,cAAAA,IAAI,EAAE;AACJd,gBAAAA,QAAQ,EAAEW,OAAO,CAACX,QADd;AAEJC,gBAAAA,KAAK,EAAEU,OAAO,CAACV,KAFX;AAGJC,gBAAAA,QAAQ,EAAES,OAAO,CAACT,QAHd;AAIJa,gBAAAA,EAAE,EAAEJ,OAAO,CAACK,GAJR;AAKJC,gBAAAA,OAAO,EAAEN,OAAO,CAACM;AALb;AADR,aADY,EAUZC,OAAO,CAACC,GAAR,CAAYC,UAVA,EAWZ;AAAEC,cAAAA,SAAS,EAAE;AAAb,aAXY,CADH;AAeXvB,YAAAA,GAAG,CAACO,IAAJ,CAAS;AACPC,cAAAA,OAAO,EAAE,gCADF;AAEPK,cAAAA,OAAO,EAAPA,OAFO;AAGPC,cAAAA,KAAK,EAAEA;AAHA,aAAT;AAKD,WApBD,MAoBO,IAAI,CAACD,OAAL,EAAc;AACnBb,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAAT;AACD;;AA9BiB;AAAA;;AAAA;AAAA;AAAA;AAgClBR,UAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE,mBAAX;AAAgCE,YAAAA,KAAK;AAArC,WAAT;;AAhCkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB,E,CAoCA;;AAEApB,MAAM,CAACQ,IAAP,CAAY,gCAAZ,EAA8CL,QAA9C,EAAwD,kBAAOM,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEpBD,GAAG,CAACyB,MAFgB,EAE5CC,QAF4C,eAE5CA,QAF4C,EAElCC,SAFkC,eAElCA,SAFkC;AAAA;AAAA,0CAG9B7B,YAAY,CAAC8B,QAAb,CAAsBD,SAAtB,CAH8B;;AAAA;AAG9Cb,UAAAA,OAH8C;AAAA;AAAA,0CAK/BjB,WAAW,CAAC+B,QAAZ,CAAqBF,QAArB,CAL+B;;AAAA;AAK9CG,UAAAA,MAL8C;AAMpDC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AANoD,gBAOhD,CAACf,OAAD,IAAY,CAACe,MAPmC;AAAA;AAAA;AAAA;;AAAA,4CAQ3C5B,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBxB,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAR2C;;AAAA;AAUpDK,UAAAA,OAAO,CAACmB,SAAR,CAAkBC,IAAlB,CAAuBL,MAAvB;AAVoD;AAAA,0CAW9Cf,OAAO,CAACP,IAAR,EAX8C;;AAAA;AAYpDN,UAAAA,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBxB,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAoCK,YAAAA,OAAO,EAAPA;AAApC,WAArB;AAZoD;AAAA;;AAAA;AAAA;AAAA;AAcpDb,UAAAA,GAAG,CACA+B,MADH,CACU,GADV,EAEGxB,IAFH,CAEQ;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAoC0B,YAAAA,GAAG,EAAE,aAAM1B;AAA/C,WAFR;;AAdoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxD;AAmBAlB,MAAM,CAAC6C,GAAP,CAAW,uBAAX,EAAoC,kBAAMpC,GAAN,EAAUC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEVH,YAAY,CAAC8B,QAAb,CAAsB5B,GAAG,CAACyB,MAAJ,CAAWE,SAAjC,EAA4C,WAA5C,CAFU;;AAAA;AAE1Bb,UAAAA,OAF0B;;AAGhC,cAAG,CAACA,OAAJ,EAAY;AACVb,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAACC,cAAAA,OAAO,EAAC;AAAT,aAAT;AACD;;AACDR,UAAAA,GAAG,CAACO,IAAJ,CAAS;AAACC,YAAAA,OAAO,EAAC,oBAAT;AAA+BoB,YAAAA,MAAM,EAAEf;AAAvC,WAAT;AANgC;AAAA;;AAAA;AAAA;AAAA;AAQhCb,UAAAA,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBxB,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAC;AAAT,WAArB;;AARgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApC,E,CAcA;;AAEAlB,MAAM,CAAC6C,GAAP,CAAW,UAAX,EAAuB1C,QAAvB,EAAiC,kBAAOM,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBgB,UAAAA,IADyB,GAClBjB,GAAG,CAACiB,IADc;AAE/Ba,UAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AAF+B;AAAA,0CAGVpB,WAAW,CAACwC,IAAZ,EAHU;;AAAA;AAGzBR,UAAAA,MAHyB;AAI/B5B,UAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAqC6B,YAAAA,WAAW,EAAErB,IAAI,CAACA,IAAL,CAAUd,QAA5D;AAAsEoC,YAAAA,WAAW,EAACtB,IAAI,CAACA,IAAL,CAAUb,KAA5F;AAAmGoC,YAAAA,OAAO,EAAEX;AAA5G,WAAT;;AAJ+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjC,E,CAOA;;AAEAtC,MAAM,CAAC6C,GAAP,CAAW,aAAX,EAA0B1C,QAA1B,EAAoC,kBAAOM,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BgB,UAAAA,IAD4B,GACrBjB,GAAG,CAACiB,IADiB;AAElCa,UAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AAFkC;AAAA,0CAGfpB,WAAW,CAACwC,IAAZ,CAAiB;AAAEI,YAAAA,UAAU,EAAE;AAAd,WAAjB,CAHe;;AAAA;AAG5BC,UAAAA,IAH4B;AAAA;AAAA,0CAIf7C,WAAW,CAACwC,IAAZ,CAAiB;AAAEI,YAAAA,UAAU,EAAE;AAAd,WAAjB,CAJe;;AAAA;AAI5BE,UAAAA,IAJ4B;AAKlC1C,UAAAA,GAAG,CAACO,IAAJ,CAAS;AACPC,YAAAA,OAAO,EAAE,SADF;AAEPQ,YAAAA,IAAI,EAAEA,IAFC;AAGP2B,YAAAA,WAAW,EAAEF,IAHN;AAIPG,YAAAA,WAAW,EAAEF;AAJN,WAAT;;AALkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApC,E,CAaA;;AAEApD,MAAM,CAACuD,GAAP,CAAW,aAAX,EAA0B,kBAAO9C,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uBACcD,GAAG,CAACE,IADlB,EAChBE,KADgB,cAChBA,KADgB,EACTC,QADS,cACTA,QADS,EACCF,QADD,cACCA,QADD;AAElBe,UAAAA,EAFkB,GAEblB,GAAG,CAACyB,MAAJ,CAAWP,EAFE;AAAA;AAAA,0CAGLpB,YAAY,CAACiD,SAAb,CACjB;AAAE5B,YAAAA,GAAG,EAAED;AAAP,WADiB,EAEjB;AAAE8B,YAAAA,IAAI,EAAE;AAAE5C,cAAAA,KAAK,EAAEA,KAAT;AAAgBC,cAAAA,QAAQ,EAAEA,QAA1B;AAAoCF,cAAAA,QAAQ,EAAEA;AAA9C;AAAR,WAFiB,CAHK;;AAAA;AAGlBc,UAAAA,IAHkB;AAOxBhB,UAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE,sBAAX;AAAmCQ,YAAAA,IAAI,EAAJA;AAAnC,WAAT;;AAPwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B,E,CAUA;;AAEA1B,MAAM,CAAC6C,GAAP,CAAW,gBAAX,EAA6B,kBAAOpC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnBgD,UAAAA,KAFmB,GAEXjD,GAAG,CAACiD,KAAJ,CAAUC,CAFC;AAAA;AAAA,0CAGJrD,WAAW,CAACwC,IAAZ,CAAiB;AACpCc,YAAAA,GAAG,EAAE,CACH;AAAEC,cAAAA,UAAU,EAAE;AAAEC,gBAAAA,MAAM,EAAEJ,KAAV;AAAiBK,gBAAAA,QAAQ,EAAE;AAA3B;AAAd,aADG,EAEH;AAACb,cAAAA,UAAU,EAAC;AAAEY,gBAAAA,MAAM,EAAEJ,KAAV;AAAiBK,gBAAAA,QAAQ,EAAE;AAA3B;AAAZ,aAFG;AAD+B,WAAjB,CAHI;;AAAA;AAGnBzB,UAAAA,MAHmB;AAAA;AAAA,0CASAjC,aAAa,CAACyC,IAAd,CAAmB;AAC1Cc,YAAAA,GAAG,EAAE,CAAC;AAAEhD,cAAAA,QAAQ,EAAE;AAAEkD,gBAAAA,MAAM,EAAEJ,KAAV;AAAiBK,gBAAAA,QAAQ,EAAE;AAA3B;AAAZ,aAAD;AADqC,WAAnB,CATA;;AAAA;AASnBC,UAAAA,UATmB;AAYzBtD,UAAAA,GAAG,CAACO,IAAJ,CAAS;AACPC,YAAAA,OAAO,EAAE,eADF;AAEP+C,YAAAA,OAAO,EAAE3B,MAFF;AAGP0B,YAAAA,UAAU,EAAEA;AAHL,WAAT;AAZyB;AAAA;;AAAA;AAAA;AAAA;AAkBzBtD,UAAAA,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBxB,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,uBAAX;AAAoCE,YAAAA,KAAK;AAAzC,WAArB;;AAlByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B,E,CAsBA;;AAEApB,MAAM,CAACQ,IAAP,CAAY,gCAAZ,EAA8CL,QAA9C,EAAwD,kBAAOM,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEpBD,GAAG,CAACyB,MAFgB,EAE5CC,QAF4C,gBAE5CA,QAF4C,EAElCC,SAFkC,gBAElCA,SAFkC;AAAA;AAAA,0CAG9B7B,YAAY,CAAC8B,QAAb,CAAsB;AAAET,YAAAA,GAAG,EAAEQ;AAAP,WAAtB,CAH8B;;AAAA;AAG9Cb,UAAAA,OAH8C;AAAA;AAAA,0CAI/BjB,WAAW,CAAC+B,QAAZ,CAAqB;AAAET,YAAAA,GAAG,EAAEO;AAAP,WAArB,CAJ+B;;AAAA;AAI9CG,UAAAA,MAJ8C;AAKpDC,UAAAA,OAAO,CAACC,GAAR,CAAYjB,OAAZ,EAAqBe,MAArB;AACAf,UAAAA,OAAO,CAAC2C,QAAR,CAAiBvB,IAAjB,CAAsBL,MAAtB;AANoD;AAAA,0CAO9Cf,OAAO,CAACP,IAAR,EAP8C;;AAAA;AAQpDN,UAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE,mBAAX;AAAgCK,YAAAA,OAAO,EAAEA;AAAzC,WAAT;AARoD;AAAA;;AAAA;AAAA;AAAA;AAUpDb,UAAAA,GAAG,CAACO,IAAJ;AACEG,YAAAA,KAAK,EAAE,aAAMF;AADf,sBAES,uCAFT;;AAVoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxD,E,CAiBA;;AAEAlB,MAAM,CAAC6C,GAAP,CAAW,cAAX,EAA2B1C,QAA3B,EAAqC,mBAAOM,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2BACPD,GAAG,CAACiB,IAAJ,CAASA,IADF,EAC3Bb,KAD2B,kBAC3BA,KAD2B,EACpBC,QADoB,kBACpBA,QADoB;AAAA;AAAA,0CAEbP,YAAY,CAACuC,IAAb,CAAkB;AAAEjC,YAAAA,KAAK,EAAEA,KAAT;AAAgBC,YAAAA,QAAQ,EAAEA;AAA1B,WAAlB,EAAwD,UAAxD,CAFa;;AAAA;AAE7BS,UAAAA,OAF6B;AAGnCgB,UAAAA,OAAO,CAACC,GAAR,CAAYjB,OAAZ;;AACA,cAAI;AACF,gBAAI,CAACA,OAAL,EAAc;AACZb,cAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEC,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACD;;AACDR,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEC,cAAAA,OAAO,EAAE,gBAAX;AAA6BiD,cAAAA,IAAI,EAAE5C;AAAnC,aAAT;AACD,WALD,CAKE,OAAOH,KAAP,EAAc;AACdV,YAAAA,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBxB,IAAhB,CAAqB;AAACC,cAAAA,OAAO,EAAC;AAAT,aAArB;AACD;;AAXkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArC,E,CAeA;;AAEAlB,MAAM,CAACuD,GAAP,CAAW,qCAAX,EAAkDpD,QAAlD,EAA4D,mBAAOM,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBAC7BD,GAAG,CAACyB,MADyB,EACnDC,QADmD,gBACnDA,QADmD,EAC1CiC,SAD0C,gBAC1CA,SAD0C;AAEpD1C,UAAAA,IAFoD,GAE7CjB,GAAG,CAACiB,IAFyC;AAAA,uBAGhCA,IAAI,CAACA,IAH2B,EAGnDb,KAHmD,cAGnDA,KAHmD,EAG5CC,QAH4C,cAG5CA,QAH4C;AAAA;AAAA;AAAA,0CAKlCP,YAAY,CAAC8D,gBAAb,CACpB;AAAExD,YAAAA,KAAK,EAAEa,IAAI,CAACA,IAAL,CAAUb,KAAnB;AAAyBC,YAAAA,QAAQ,EAACY,IAAI,CAACA,IAAL,CAAUZ,QAA5C;AAAsD,6BAAiBqB;AAAvE,WADoB,EAEpB;AAAEsB,YAAAA,IAAI,EAAE;AAAE,uCAAyBW;AAA3B;AAAR,WAFoB,EAGpB;AAAE,mBAAK;AAAP,WAHoB,CALkC;;AAAA;AAKlD7C,UAAAA,OALkD;;AAAA,cAUnDA,OAVmD;AAAA;AAAA;AAAA;;AAAA,6CAW/Cb,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBxB,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAX+C;;AAAA;AAaxDR,UAAAA,GAAG,CAACO,IAAJ,CAASM,OAAT;AAbwD;AAAA;;AAAA;AAAA;AAAA;AAexDb,UAAAA,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBxB,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,cAAMA;AAAjB,WAArB;;AAfwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5D,E,CAoBA;;AAGAlB,MAAM,CAAC6C,GAAP,CAAW,4BAAX,EAAyC1C,QAAzC,EAAmD,mBAAMM,GAAN,EAAUC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEzBH,YAAY,CAAC8B,QAAb,CAAsB;AAACT,YAAAA,GAAG,EAACnB,GAAG,CAACyB,MAAJ,CAAWE;AAAhB,WAAtB,CAFyB;;AAAA;AAEzCb,UAAAA,OAFyC;;AAAA,cAG3CA,OAH2C;AAAA;AAAA;AAAA;;AAAA,6CAItCb,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBxB,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAJsC;;AAAA;AAMzCoD,UAAAA,gBANyC,GAMtB/C,OAAO,CAACmB,SAAR,CAAkB6B,MAAlB,CAAyB,UAAA7B,SAAS;AAAA,mBAAIA,SAAS,CAAC0B,SAAd;AAAA,WAAlC,CANsB;AAO/C1D,UAAAA,GAAG,CAACO,IAAJ,CAAS;AAACC,YAAAA,OAAO,EAAC,uBAAT;AAAkC+B,YAAAA,OAAO,EAACqB;AAA1C,WAAT;AAP+C;AAAA;;AAAA;AAAA;AAAA;AAS/C5D,UAAAA,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBxB,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,gBAAX;AAA6BE,YAAAA,KAAK;AAAlC,WAArB;;AAT+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnD;AAaAoD,MAAM,CAACC,OAAP,GAAiBzE,MAAjB","sourcesContent":["const router = require(\"express\").Router();\r\nconst validate = require(\"../config/verifyToken.js\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst {\r\n  registerModel,\r\n  courseModel,\r\n  studentModel,\r\n} = require(\"../models/registrationModel.js\");\r\n\r\n\r\n//student registration\r\n\r\nrouter.post(\"/register\", async (req, res) => {\r\n  try {\r\n    const { username, email, password } = req.body;\r\n    const newStudent = new studentModel({\r\n      username: username,\r\n      password: password,\r\n      email: email,\r\n    });\r\n    await newStudent.save();\r\n    res.json({\r\n      message: \"Student registered successfully \",\r\n      StudenDetails: newStudent,\r\n    });\r\n  } catch (error) {\r\n    res.json({ error: error.message });\r\n  }\r\n});\r\n\r\n//user login\r\n\r\nrouter.post(\"/login\", async (req, res, next) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n\r\n    const student = await studentModel.findOne({\r\n      email: email,\r\n      password: password,\r\n    });\r\n    if (student) {\r\n      const token = jwt.sign(\r\n        {\r\n          user: {\r\n            username: student.username,\r\n            email: student.email,\r\n            password: student.password,\r\n            id: student._id,\r\n            profile: student.profile,\r\n          },\r\n        },\r\n        process.env.SECRET_KEY,\r\n        { expiresIn: \"1h\" }\r\n      );\r\n\r\n      res.json({\r\n        message: \"Student logged in successfully\",\r\n        student,\r\n        token: token,\r\n      });\r\n    } else if (!student) {\r\n      res.json({ message: \"No student found\" });\r\n    }\r\n  } catch (error) {\r\n    res.json({ message: \"Error while login\", error });\r\n  }\r\n});\r\n\r\n//purchase courses\r\n\r\nrouter.post(\"/purchase/:courseId/:studentId\", validate, async (req, res) => {\r\n  try {\r\n    const { courseId, studentId } = req.params;\r\n    const student = await studentModel.findById(studentId);\r\n    // console.log(student);\r\n    const course = await courseModel.findById(courseId);\r\n    console.log(course)\r\n    if (!student || !course) {\r\n      return res.status(400).json({ message: \"User/Course not found \" });\r\n    }\r\n    student.purchases.push(course);\r\n    await student.save();\r\n    res.status(200).json({ message: \"Course added to user \", student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", err: error.message });\r\n  }\r\n});\r\nrouter.get('/purchases/:studentId', async(req,res)=>{\r\n  try {\r\n    const student = await studentModel.findById(req.params.studentId, 'purchases')\r\n    if(!student){\r\n      res.json({message:\"No courses in the purchased list\"})\r\n    }\r\n    res.json({message:\"Your Purchases are\", course: student})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error \"})\r\n  }\r\n \r\n\r\n})\r\n\r\n// user profile\r\n\r\nrouter.get(\"/profile\", validate, async (req, res) => {\r\n  const user = req.user;\r\n  console.log(user);\r\n  const course = await courseModel.find();\r\n  res.json({ message: \"Courses available are\",  studentName: user.user.username, studentMail:user.user.email, courses: course, });\r\n});\r\n\r\n//categories\r\n\r\nrouter.get(\"/categories\", validate, async (req, res) => {\r\n  const user = req.user;\r\n  console.log(user);\r\n  const free = await courseModel.find({ coursetype: \"free\" });\r\n  const paid = await courseModel.find({ coursetype: \"paid\" });\r\n  res.json({\r\n    message: \"fetched\",\r\n    user: user,\r\n    FreeCourses: free,\r\n    PaidCourses: paid,\r\n  });\r\n});\r\n\r\n//update user details\r\n\r\nrouter.put(\"/update/:id\", async (req, res) => {\r\n  const { email, password, username } = req.body;\r\n  const id = req.params.id;\r\n  const user = await studentModel.updateOne(\r\n    { _id: id },\r\n    { $set: { email: email, password: password, username: username } }\r\n  );\r\n  res.json({ message: \"updated successfully\", user });\r\n});\r\n\r\n//search & filter\r\n\r\nrouter.get(\"/search/filter\", async (req, res) => {\r\n  try {\r\n    const query = req.query.q;\r\n    const course = await courseModel.find({\r\n      $or: [\r\n        { coursename: { $regex: query, $options: \"i\" } },\r\n        {coursetype:{ $regex: query, $options: 'i'}},\r\n      ],\r\n    });\r\n    const instructor = await registerModel.find({\r\n      $or: [{ username: { $regex: query, $options: \"i\" } }],\r\n    });\r\n    res.json({\r\n      message: \"found results\",\r\n      Courses: course,\r\n      instructor: instructor,\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error While searching\", error });\r\n  }\r\n});\r\n\r\n//wishlist creation\r\n\r\nrouter.post(\"/wishlist/:courseId/:studentId\", validate, async (req, res) => {\r\n  try {\r\n    const { courseId, studentId } = req.params;\r\n    const student = await studentModel.findById({ _id: studentId });\r\n    const course = await courseModel.findById({ _id: courseId });\r\n    console.log(student, course);\r\n    student.wishlist.push(course);\r\n    await student.save();\r\n    res.json({ message: \"wishlist created \", student: student });\r\n  } catch (error) {\r\n    res.json({\r\n      error: error.message,\r\n      error: \"Error occured while creating wishlist\",\r\n    });\r\n  }\r\n});\r\n\r\n//get all wishList\r\n\r\nrouter.get(\"/getwishlist\", validate, async (req, res) => {\r\n  const { email, password } = req.user.user;\r\n  const student = await studentModel.find({ email: email, password: password }, 'wishlist');\r\n  console.log(student)\r\n  try {\r\n    if (!student) {\r\n      res.json({ message: \"There are no courses in your wishlist\" });\r\n    }\r\n    res.json({ message: \"Wishlist found\", list: student});\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\"})\r\n  }\r\n});\r\n\r\n\r\n//certification\r\n\r\nrouter.put(\"/certification/:courseId/:completed\", validate, async (req, res) => {\r\n  const{ courseId,completed} = req.params\r\n  const user = req.user\r\n  const {email, password} = user.user\r\n  try {\r\n    const student = await studentModel.findOneAndUpdate(\r\n      { email: user.user.email,password:user.user.password, 'purchases._id': courseId },\r\n      { $set: { 'purchases.$.completed': completed } },\r\n      { new: true }\r\n    );\r\n    if (!student) {\r\n      return res.status(404).json({ message: 'Student or course not found' });\r\n    }\r\n    res.json(student);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message});\r\n  }\r\n});\r\n\r\n\r\n//get certificate\r\n\r\n\r\nrouter.get('/getcertificate/:studentId', validate, async(req,res)=>{\r\n  try {\r\n    const student = await studentModel.findById({_id:req.params.studentId})\r\n    if(!student){\r\n      return res.status(404).json({ message: 'Student not found' });\r\n    }\r\n    const completedCourses = student.purchases.filter(purchases => purchases.completed);\r\n    res.json({message:\"Courses Completed are\", courses:completedCourses})\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error fetching', error });\r\n  }\r\n})\r\n\r\nmodule.exports = router;\r\n"],"file":"student.dev.js"}