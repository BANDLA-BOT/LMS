{"version":3,"sources":["student.js"],"names":["router","require","Router","validate","path","jwt","registerModel","courseModel","studentModel","multer","storage","diskStorage","destination","req","file","cb","filename","Date","now","extname","originalname","upload","single","post","res","body","username","email","password","profile","newStudent","save","json","message","StudenDetails","error","next","findOne","student","token","sign","user","id","_id","process","env","SECRET_KEY","expiresIn","params","courseId","studentId","findById","console","log","course","status","purchases","push","err","get","find","courses","coursetype","free","paid","FreeCourses","PaidCourses","put","updateOne","$set","query","q","$or","coursename","$regex","$options","instructor","Courses","wishlist","length","list","completed","findOneAndUpdate","aggregate","$unwind","$match","$group","$first","completedPurchases","$push","module","exports"],"mappings":"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","sourcesContent":["const router = require(\"express\").Router();\r\nconst validate = require(\"../config/verifyToken.js\");\r\nconst path = require(\"path\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst {\r\n  registerModel,\r\n  courseModel,\r\n  studentModel,\r\n} = require(\"../models/registrationModel.js\");\r\n\r\n//multer to upload profile picture\r\n\r\nconst multer = require(\"multer\");\r\n\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, \"public/profile\");\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, Date.now() + \"-\" + path.extname(file.originalname));\r\n  },\r\n});\r\nconst upload = multer({\r\n  storage: storage,\r\n}).single(\"profile\");\r\n\r\n//student registration\r\n\r\nrouter.post(\"/register\", upload, async (req, res) => {\r\n  try {\r\n    const { username, email, password } = req.body;\r\n    const profile = req.file.profile;\r\n    const newStudent = new studentModel({\r\n      username: username,\r\n      password: password,\r\n      email: email,\r\n      profile: profile,\r\n    });\r\n    await newStudent.save();\r\n    res.json({\r\n      message: \"Student registered successfully \",\r\n      StudenDetails: newStudent,\r\n    });\r\n  } catch (error) {\r\n    res.json({ error: error.message });\r\n  }\r\n});\r\n\r\n//user login\r\n\r\nrouter.post(\"/login\", async (req, res, next) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const student = await studentModel.findOne({\r\n      email: email,\r\n      password: password,\r\n    });\r\n    if (student) {\r\n      const token = jwt.sign(\r\n        {\r\n          user: {\r\n            username: student.username,\r\n            email: student.email,\r\n            password: student.password,\r\n            id: student._id,\r\n            profile: student.profile,\r\n          },\r\n        },\r\n        process.env.SECRET_KEY,\r\n        { expiresIn: \"1h\" }\r\n      );\r\n\r\n      res.json({\r\n        message: \"Student logged in successfully\",\r\n        student,\r\n        token: token,\r\n      });\r\n    } else if (!student) {\r\n      res.json({ message: \"No student found\" });\r\n    }\r\n  } catch (error) {\r\n    res.json({ message: \"Error while login\", error });\r\n  }\r\n});\r\n\r\n//purchase courses\r\n\r\nrouter.post(\"/purchase/:courseId/:studentId\", validate, async (req, res) => {\r\n  try {\r\n    const { courseId, studentId } = req.params;\r\n    const student = await studentModel.findById(studentId);\r\n    console.log(student);\r\n    const course = await courseModel.findById(courseId);\r\n    if (!student || !course) {\r\n      return res.status(400).json({ message: \"User/Course not found \" });\r\n    }\r\n    student.purchases.push(course);\r\n    await student.save();\r\n    res.status(200).json({ message: \"Course added to user \", student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", err: error.message });\r\n  }\r\n});\r\n\r\n// user profile\r\n\r\nrouter.get(\"/profile\", validate, async (req, res) => {\r\n  const user = req.user;\r\n  console.log(user);\r\n  const course = await courseModel.find();\r\n  res.json({ message: \"Courses available are\", courses: course });\r\n});\r\n\r\n//categories\r\n\r\nrouter.get(\"/categories\", validate, async (req, res) => {\r\n  const user = req.user;\r\n  console.log(user);\r\n  const free = await courseModel.find({ coursetype: \"free\" });\r\n  const paid = await courseModel.find({ coursetype: \"paid\" });\r\n  res.json({\r\n    message: \"fetched\",\r\n    user: user,\r\n    FreeCourses: free,\r\n    PaidCourses: paid,\r\n  });\r\n});\r\n\r\n//update user details\r\n\r\nrouter.put(\"/update/:id\", async (req, res) => {\r\n  const { email, password, username } = req.body;\r\n  const id = req.params.id;\r\n  const user = await registerModel.updateOne(\r\n    { _id: id },\r\n    { $set: { email: email, password: password, username: username } }\r\n  );\r\n  res.json({ message: \"updated successfully\", user });\r\n});\r\n\r\n//search & filter\r\n\r\nrouter.get(\"/search/filter\", async (req, res) => {\r\n  try {\r\n    const query = req.query.q;\r\n    const course = await courseModel.find({\r\n      $or: [{ coursename: { $regex: query, $options: \"i\" } }],\r\n    });\r\n    const instructor = await registerModel.find({\r\n      $or: [{ username: { $regex: query, $options: \"i\" } }],\r\n    });\r\n    res.json({\r\n      message: \"found results\",\r\n      Courses: course,\r\n      instructor: instructor,\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error While searching\", error });\r\n  }\r\n});\r\n\r\n//wishlist creation\r\n\r\nrouter.post(\"/wishlist/:courseId/:studentId\", validate, async (req, res) => {\r\n  try {\r\n    const { courseId, studentId } = req.params;\r\n    const student = await studentModel.findById({ _id: studentId });\r\n    const course = await courseModel.findById({ _id: courseId });\r\n    console.log(student, course);\r\n    student.wishlist.push(course);\r\n    await student.save();\r\n    res.json({ message: \"wishlist created \", student: student });\r\n  } catch (error) {\r\n    res.json({\r\n      error: error.message,\r\n      error: \"Error occured while creating wishlist\",\r\n    });\r\n  }\r\n});\r\n\r\n//get all wishList\r\n\r\nrouter.get(\"/getwishlist\", validate, async (req, res) => {\r\n  const { email, password } = req.user.user;\r\n  const student = await studentModel.find({ email: email, password: password });\r\n  try {\r\n    if (!student[0].wishlist.length) {\r\n      res.json({ message: \"There are no courses in your wishlist\" });\r\n    }\r\n    res.json({ message: \"Wishlist found\", list: student[0].wishlist });\r\n  } catch (error) {}\r\n});\r\n\r\n//certification\r\n\r\nrouter.put(\"/certification/:courseId/:completed\", validate, async (req, res) => {\r\n  const{ courseId,completed} = req.params\r\n  const user = req.user\r\n  const {email, password} = user.user\r\n  try {\r\n    const student = await studentModel.findOneAndUpdate(\r\n      { email: user.user.email,password:user.user.password, 'purchases._id': courseId },\r\n      { $set: { 'purchases.$.completed': completed } },\r\n      { new: true }\r\n    );\r\n    if (!student) {\r\n      return res.status(404).json({ message: 'Student or course not found' });\r\n    }\r\n    res.json(student);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n});\r\nrouter.get('/getcertificate', validate, async(req,res)=>{\r\n  try {\r\n    const completedPurchases = await studentModel.aggregate([\r\n      { $unwind: '$purchases' },\r\n      { $match: { 'purchases.completed': true } },\r\n      {\r\n        $group: {\r\n          _id: '$_id',\r\n          email: { $first: '$email' },\r\n          username: { $first: '$username' },\r\n          completedPurchases: { $push: '$purchases' }\r\n        }\r\n      }\r\n    ]);\r\n    res.json(completedPurchases);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error fetching completed purchases', error });\r\n  }\r\n\r\n  // const user = req.user\r\n  // const student = await studentModel.find({email:user.user.email, password:user.user.password})\r\n  // const isCompleted = student.purchases.completed\r\n  // try {\r\n  //   if(isCompleted){\r\n  //     const course = student[0].purchases\r\n  //     res.json({message:\"You can access certificate\", username:user.user.username, email:user.user.email,})\r\n  //   }\r\n  //   res.json({message:\"You cannot Access certificate\"})\r\n  // } catch (error) {\r\n    \r\n  // }\r\n})\r\n\r\nmodule.exports = router;\r\n"],"file":"student.dev.js"}