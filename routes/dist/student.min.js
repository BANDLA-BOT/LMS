"use strict";var router=require("express").Router(),validate=require("../config/verifyToken.js"),jwt=require("jsonwebtoken"),_require=require("../models/registrationModel.js"),registerModel=_require.registerModel,courseModel=_require.courseModel;router.post("/login",function(r,s){var t,n,a,o,u;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,t=r.body,n=t.email,a=t.password,e.next=4,regeneratorRuntime.awrap(registerModel.findOne({email:n,password:a,role:"student"}));case 4:(o=e.sent)?(u=jwt.sign({user:{username:o.username,email:o.email,id:o._id,role:o.role}},process.env.SECRET_KEY,{expiresIn:"3m"}),s.json({message:"Student logged in successfully",student:o,token:u})):o||s.json({message:"No student found"}),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),s.json({message:"Error while login",error:e.t0});case 11:case"end":return e.stop()}},null,null,[[0,8]])}),router.post("/course/:courseId/:userId",function(r,s){var t,n,a,o,u;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,t=r.params,n=t.courseId,a=t.userId,e.next=4,regeneratorRuntime.awrap(registerModel.findById(a));case 4:return o=e.sent,e.next=7,regeneratorRuntime.awrap(courseModel.findById(n));case 7:if(u=e.sent,o&&u){e.next=10;break}return e.abrupt("return",s.status(400).json({message:"User/Course not found "}));case 10:return o.courseDetails.push(u._id),e.next=13,regeneratorRuntime.awrap(o.save());case 13:s.status(200).json({message:"Course added to user ",user:o}),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(0),s.status(500).json({message:"Internal server error",err:e.t0.message});case 19:case"end":return e.stop()}},null,null,[[0,16]])}),router.get("/profile",validate,function(e,r){var s;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(courseModel.find());case 2:s=e.sent,r.json({message:"fetched",course:s});case 4:case"end":return e.stop()}})}),router.put("/update/:id",function(r,s){var t,n,a,o,u,i,c;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.body,n=t.email,a=t.password,o=t.role,u=t.username,i=r.params.id,e.next=4,regeneratorRuntime.awrap(registerModel.updateOne({_id:i},{$set:{email:n,password:a,role:o,username:u}}));case 4:c=e.sent,s.json({message:"updated successfully",user:c});case 6:case"end":return e.stop()}})}),module.exports=router;
//# sourceMappingURL=student.min.js.map
