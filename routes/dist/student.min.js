"use strict";function _defineProperty(e,r,s){return r in e?Object.defineProperty(e,r,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[r]=s,e}var router=require("express").Router(),validate=require("../config/verifyToken.js"),path=require("path"),jwt=require("jsonwebtoken"),_require=require("../models/registrationModel.js"),registerModel=_require.registerModel,courseModel=_require.courseModel,wishlistModel=_require.wishlistModel,multer=require("multer");router.post("/login",function(r,s){var t,n,a,o,u;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,t=r.body,n=t.email,a=t.password,e.next=4,regeneratorRuntime.awrap(registerModel.findOne({email:n,password:a,role:"student"}));case 4:(o=e.sent)?(u=jwt.sign({user:{username:o.username,email:o.email,id:o._id,profile:o.profile,role:o.role}},process.env.SECRET_KEY,{expiresIn:"1h"}),s.json({message:"Student logged in successfully",student:o,token:u})):o||s.json({message:"No student found"}),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),s.json({message:"Error while login",error:e.t0});case 11:case"end":return e.stop()}},null,null,[[0,8]])}),router.post("/purchase/:courseId/:userId",validate,function(r,s){var t,n,a,o,u;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,t=r.params,n=t.courseId,a=t.userId,e.next=4,regeneratorRuntime.awrap(registerModel.findById(a));case 4:return o=e.sent,e.next=7,regeneratorRuntime.awrap(courseModel.findById(n));case 7:if(u=e.sent,o&&u){e.next=10;break}return e.abrupt("return",s.status(400).json({message:"User/Course not found "}));case 10:return o.purchases.push(u),e.next=13,regeneratorRuntime.awrap(o.save());case 13:s.status(200).json({message:"Course added to user ",user:o}),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(0),s.status(500).json({message:"Internal server error",err:e.t0.message});case 19:case"end":return e.stop()}},null,null,[[0,16]])}),router.get("/profile",validate,function(r,s){var t,n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.user,console.log(t),e.next=4,regeneratorRuntime.awrap(courseModel.find());case 4:n=e.sent,s.json({message:"Courses available are",courses:n});case 6:case"end":return e.stop()}})}),router.get("/categories",validate,function(r,s){var t,n,a;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.user,console.log(t),e.next=4,regeneratorRuntime.awrap(courseModel.find({coursetype:"free"}));case 4:return n=e.sent,e.next=7,regeneratorRuntime.awrap(courseModel.find({coursetype:"paid"}));case 7:a=e.sent,s.json({message:"fetched",user:t,FreeCourses:n,PaidCourses:a});case 9:case"end":return e.stop()}})}),router.put("/update/:id",function(r,s){var t,n,a,o,u,i;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.body,n=t.email,a=t.password,o=t.username,u=r.params.id,e.next=4,regeneratorRuntime.awrap(registerModel.updateOne({_id:u},{$set:{email:n,password:a,username:o}}));case 4:i=e.sent,s.json({message:"updated successfully",user:i});case 6:case"end":return e.stop()}})}),router.get("/search/filter",function(r,s){var t,n,a;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,t=r.query.q,e.next=4,regeneratorRuntime.awrap(courseModel.find({$or:[{coursename:{$regex:t,$options:"i"}}]}));case 4:return n=e.sent,e.next=7,regeneratorRuntime.awrap(registerModel.find({$or:[{username:{$regex:t,$options:"i"}}]}));case 7:a=e.sent,s.json({message:"found results",Courses:n,instructor:a}),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(0),s.status(500).json({message:"Error While searching",error:e.t0});case 14:case"end":return e.stop()}},null,null,[[0,11]])}),router.post("/wishlist/:Id",validate,function(r,s){var t,n,a,o;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,t=r.user,console.log(t.user.username),n=r.params.Id,e.next=6,regeneratorRuntime.awrap(courseModel.findById({_id:n}));case 6:return a=e.sent,console.log(a),o=new wishlistModel({list:a,studentUsername:t.user.username,studentEmail:t.user.email,studentId:t.user.id}),e.next=11,regeneratorRuntime.awrap(o.save());case 11:s.json({message:"wishlist created ",wishlist:o}),e.next=17;break;case 14:e.prev=14,e.t0=e.catch(0),s.json(_defineProperty({error:e.t0.message},"error","Error occured while creating wishlist"));case 17:case"end":return e.stop()}},null,null,[[0,14]])}),router.get("/getwishlist",validate,function(e,r){var s;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(wishlistModel.find());case 2:s=e.sent,r.json({wishlist:s});case 4:case"end":return e.stop()}})}),router.get("/certification",validate,function(r){var s,t,n,a;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return s=r.user,console.log(s),t=s.user.username,n=s.user.email,console.log(t),console.log(n),e.next=8,regeneratorRuntime.awrap(registerModel.findOne({email:n,username:t}));case 8:a=e.sent,console.log(a.purchases);case 10:case"end":return e.stop()}})}),module.exports=router;
//# sourceMappingURL=student.min.js.map
