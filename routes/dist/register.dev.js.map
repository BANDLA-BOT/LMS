{"version":3,"sources":["register.js"],"names":["router","require","Router","sendEmail","multer","registerModel","storage","diskStorage","destination","req","file","cb","filename","Date","now","originalname","upload","single","post","res","body","username","email","password","role","profile","user","save","text","json","message","error","module","exports"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,MAAnB,EAAf;;AACA,IAAMC,SAAS,GAAGF,OAAO,CAAC,uBAAD,CAAzB,C,CACA;;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;eAC0BA,OAAO,CAAC,gCAAD,C;IAAzBI,a,YAAAA,a;;AAER,IAAMC,OAAO,GAAGF,MAAM,CAACG,WAAP,CAAmB;AACjCC,EAAAA,WAAW,EAAC,qBAACC,GAAD,EAAKC,IAAL,EAAUC,EAAV,EAAe;AACzBA,IAAAA,EAAE,CAAC,IAAD,EAAO,gBAAP,CAAF;AACD,GAHgC;AAIjCC,EAAAA,QAAQ,EAAC,kBAACH,GAAD,EAAKC,IAAL,EAAUC,EAAV,EAAe;AACtBA,IAAAA,EAAE,CAAC,IAAD,EAAOE,IAAI,CAACC,GAAL,KAAa,GAAb,GAAoBJ,IAAI,CAACK,YAAhC,CAAF;AACD;AANgC,CAAnB,CAAhB;AAQA,IAAMC,MAAM,GAAEZ,MAAM,CAAC;AACnBE,EAAAA,OAAO,EAACA;AADW,CAAD,CAAN,CAEXW,MAFW,CAEJ,SAFI,CAAd;AAIAjB,MAAM,CAACkB,IAAP,CAAY,GAAZ,EAAiBF,MAAjB,EAAyB,iBAAMP,GAAN,EAAWU,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACqBV,GAAG,CAACW,IADzB,EACfC,QADe,aACfA,QADe,EACLC,KADK,aACLA,KADK,EACEC,QADF,aACEA,QADF,EACYC,IADZ,aACYA,IADZ;AAEjBC,UAAAA,OAFiB,GAEPhB,GAAG,CAACC,IAAJ,CAASe,OAFF;AAAA;AAKfC,UAAAA,IALe,GAKR,IAAIrB,aAAJ,CAAkB;AAC7BiB,YAAAA,KAAK,EAAEA,KADsB;AAE7BD,YAAAA,QAAQ,EAAEA,QAFmB;AAG7BE,YAAAA,QAAQ,EAAEA,QAHmB;AAI7BC,YAAAA,IAAI,EAAEA,IAJuB;AAK7BC,YAAAA,OAAO,EAACA;AALqB,WAAlB,CALQ;AAAA;AAAA,0CAYfC,IAAI,CAACC,IAAL,EAZe;;AAAA;AAefC,UAAAA,IAfe,wDAgBkBF,IAAI,CAACF,IAhBvB,0CAiBRE,IAAI,CAACJ,KAjBG,qCAkBLI,IAAI,CAACH,QAlBA;AAAA;AAAA,0CAoBfpB,SAAS,CAACmB,KAAD,EAAQ,cAAR,EAAwBM,IAAxB,CApBM;;AAAA;AAqBrBT,UAAAA,GAAG,CAACU,IAAJ,CAAS;AAACC,YAAAA,OAAO,EAAC,SAAT;AAAoBJ,YAAAA,IAAI,EAAJA;AAApB,WAAT;AArBqB;AAAA;;AAAA;AAAA;AAAA;AAwBrBP,UAAAA,GAAG,CAACU,IAAJ,CAAS;AAACC,YAAAA,OAAO,EAAC,qBAAT;AAAgCC,YAAAA,KAAK;AAArC,WAAT;;AAxBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;AA4BAC,MAAM,CAACC,OAAP,GAAiBjC,MAAjB","sourcesContent":["const router = require(\"express\").Router();\r\nconst sendEmail = require(\"../config/sendmail.js\");\r\n// const path = require('path')\r\nconst multer = require('multer')\r\nconst { registerModel } = require(\"../models/registrationModel.js\");\r\n\r\nconst storage = multer.diskStorage({\r\n  destination:(req,file,cb)=>{\r\n    cb(null, 'public/profile')\r\n  },\r\n  filename:(req,file,cb)=>{\r\n    cb(null, Date.now() + '-' +  file.originalname)\r\n  }\r\n})\r\nconst upload =multer({\r\n  storage:storage\r\n}).single('profile')\r\n\r\nrouter.post(\"/\", upload, async(req, res) => {\r\n  const { username, email, password, role } = req.body;\r\n  const profile = req.file.profile\r\n\r\n  try {\r\n    const user = new registerModel({\r\n      email: email,\r\n      username: username,\r\n      password: password,\r\n      role: role,\r\n      profile:profile,\r\n    });\r\n    await user.save()\r\n\r\n\r\n    const text = `\r\n    <h1>Registered successfully as <span>${user.role}</span></h1>\r\n    <p>email:  ${user.email}</p>\r\n    <p>password:  ${user.password}</p>\r\n    `\r\n    await sendEmail(email, \"Registration\", text)\r\n    res.json({message:\"success\", user})\r\n    \r\n  } catch (error) {\r\n    res.json({message:\"Registration failed\", error})\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"file":"register.dev.js"}