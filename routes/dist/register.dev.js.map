{"version":3,"sources":["register.js"],"names":["router","require","Router","sendEmail","multer","registerModel","storage","diskStorage","destination","req","file","cb","filename","Date","now","originalname","upload","single","post","res","body","username","email","password","role","profile","user","save","text","json","message","error","module","exports"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,MAAnB,EAAf;;AACA,IAAMC,SAAS,GAAGF,OAAO,CAAC,uBAAD,CAAzB,C,CACA;;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;eAC0BA,OAAO,CAAC,gCAAD,C;IAAzBI,a,YAAAA,a,EAER;;;AAEA,IAAMC,OAAO,GAAGF,MAAM,CAACG,WAAP,CAAmB;AACjCC,EAAAA,WAAW,EAAE,qBAACC,GAAD,EAAMC,IAAN,EAAYC,EAAZ,EAAmB;AAC9BA,IAAAA,EAAE,CAAC,IAAD,EAAO,gBAAP,CAAF;AACD,GAHgC;AAIjCC,EAAAA,QAAQ,EAAE,kBAACH,GAAD,EAAMC,IAAN,EAAYC,EAAZ,EAAmB;AAC3BA,IAAAA,EAAE,CAAC,IAAD,EAAOE,IAAI,CAACC,GAAL,KAAa,GAAb,GAAmBJ,IAAI,CAACK,YAA/B,CAAF;AACD;AANgC,CAAnB,CAAhB;AAQA,IAAMC,MAAM,GAAGZ,MAAM,CAAC;AACpBE,EAAAA,OAAO,EAAEA;AADW,CAAD,CAAN,CAEZW,MAFY,CAEL,SAFK,CAAf,C,CAIA;;AAEAjB,MAAM,CAACkB,IAAP,CAAY,GAAZ,EAAiBF,MAAjB,EAAyB,iBAAOP,GAAP,EAAYU,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACqBV,GAAG,CAACW,IADzB,EACfC,QADe,aACfA,QADe,EACLC,KADK,aACLA,KADK,EACEC,QADF,aACEA,QADF,EACYC,IADZ,aACYA,IADZ;AAEjBC,UAAAA,OAFiB,GAEPhB,GAAG,CAACC,IAAJ,CAASe,OAFF;AAAA;AAKfC,UAAAA,IALe,GAKR,IAAIrB,aAAJ,CAAkB;AAC7BiB,YAAAA,KAAK,EAAEA,KADsB;AAE7BD,YAAAA,QAAQ,EAAEA,QAFmB;AAG7BE,YAAAA,QAAQ,EAAEA,QAHmB;AAI7BC,YAAAA,IAAI,EAAEA,IAJuB;AAK7BC,YAAAA,OAAO,EAAEA;AALoB,WAAlB,CALQ;AAAA;AAAA,0CAYfC,IAAI,CAACC,IAAL,EAZe;;AAAA;AAafC,UAAAA,IAbe,wDAckBF,IAAI,CAACF,IAdvB,0CAeRE,IAAI,CAACJ,KAfG,qCAgBLI,IAAI,CAACH,QAhBA;AAAA;AAAA,0CAkBfpB,SAAS,CAACmB,KAAD,EAAQ,cAAR,EAAwBM,IAAxB,CAlBM;;AAAA;AAmBrBT,UAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE,SAAX;AAAsBJ,YAAAA,IAAI,EAAJA;AAAtB,WAAT;AAnBqB;AAAA;;AAAA;AAAA;AAAA;AAqBrBP,UAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE,qBAAX;AAAkCC,YAAAA,KAAK;AAAvC,WAAT;;AArBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;AAyBAC,MAAM,CAACC,OAAP,GAAiBjC,MAAjB","sourcesContent":["const router = require(\"express\").Router();\r\nconst sendEmail = require(\"../config/sendmail.js\");\r\n// const path = require('path')\r\nconst multer = require(\"multer\");\r\nconst { registerModel } = require(\"../models/registrationModel.js\");\r\n\r\n//multer to upload\r\n\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, \"public/profile\");\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, Date.now() + \"-\" + file.originalname);\r\n  },\r\n});\r\nconst upload = multer({\r\n  storage: storage,\r\n}).single(\"profile\");\r\n\r\n//registration for Admin and Instructor\r\n\r\nrouter.post(\"/\", upload, async (req, res) => {\r\n  const { username, email, password, role } = req.body;\r\n  const profile = req.file.profile;\r\n\r\n  try {\r\n    const user = new registerModel({\r\n      email: email,\r\n      username: username,\r\n      password: password,\r\n      role: role,\r\n      profile: profile,\r\n    });\r\n    await user.save();\r\n    const text = `\r\n    <h1>Registered successfully as <span>${user.role}</span></h1>\r\n    <p>email:  ${user.email}</p>\r\n    <p>password:  ${user.password}</p>\r\n    `;\r\n    await sendEmail(email, \"Registration\", text);\r\n    res.json({ message: \"success\", user });\r\n  } catch (error) {\r\n    res.json({ message: \"Registration failed\", error });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"file":"register.dev.js"}