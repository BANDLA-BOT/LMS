{"version":3,"sources":["admin.js"],"names":["router","require","Router","registerModel","studentModel","courseModel","_req$body","email","password","role","admin","regeneratorRuntime","async","_context","prev","next","req","body","awrap","findOne","sent","res","json","message","t0","error","stop","students","instructors","courses","_context2","find","id","user","student","_context3","params","deleteOne","_id","status","module","exports"],"mappings":"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","file":"admin.min.js","sourcesContent":["const router = require('express').Router();\r\nconst {registerModel, studentModel, courseModel} = require('../models/registrationModel.js')\r\n\r\n\r\n//Admin login\r\n\r\nrouter.post('/login', async(req,res,next)=>{\r\n    try {\r\n    const {email,password,role} = req.body\r\n    const admin = await registerModel.findOne({role:role, email:email, password:password})\r\n    if(!admin){\r\n        res.json({message:\"No user found \"})\r\n    }\r\n    res.json({message:\"Admin logged in successfully\", admin :admin})\r\n    } catch (error) {\r\n        res.json({error:error.message, message:\"Internal server error\"})\r\n    }\r\n})\r\n\r\n//Admin can access all the user details\r\n\r\nrouter.get('/getall', async(req,res)=>{\r\n    try {\r\n        const students = await studentModel.find()\r\n        const instructors = await registerModel.find({role:\"instructor\"})\r\n        const courses = await courseModel.find()\r\n        if(!students){\r\n            res.json({message:\"No Students found in DB\"})\r\n        }\r\n        if(!instructors){\r\n            res.json({message:\"No instructors found in DB\"})\r\n        }\r\n        if(!courses){\r\n            res.json({message:\"No instructors found in DB\"})\r\n        }\r\n        res.json({students:students, instructors:instructors, courses:courses})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\"})\r\n    }\r\n})\r\n\r\n//Admin can delete a user \r\n\r\nrouter.delete('/deleteuser/:id', async(req,res)=>{\r\n    try {\r\n        const id = req.params.id\r\n        console.log(id)\r\n        const user = await registerModel.deleteOne({_id:id})\r\n        const student = await studentModel.deleteOne({_id:id})\r\n        res.json({message:\"user\", user, student:student})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\"})\r\n    }\r\n})\r\nmodule.exports = router"]}