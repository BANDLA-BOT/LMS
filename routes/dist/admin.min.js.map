{"version":3,"sources":["admin.js"],"names":["router","require","Router","registerModel","studentModel","_req$body","email","password","role","admin","regeneratorRuntime","async","_context","prev","next","req","body","awrap","findOne","res","post","sent","json","message","t0","error","stop","find","students","instructors","status","id","user","student","_context3","params","console","log","deleteOne","_id","module","exports"],"mappings":"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","file":"admin.min.js","sourcesContent":["const router = require('express').Router();\r\nconst {registerModel, studentModel} = require('../models/registrationModel.js')\r\n\r\n\r\n//Admin login\r\n\r\nrouter.post('/login', async(req,res,next)=>{\r\n    try {\r\n    const {email,password,role} = req.body\r\n    const admin = await registerModel.findOne({role:role, email:email, password:password})\r\n    if(!admin){\r\n        res.json({message:\"No user found \"})\r\n    }\r\n    res.json({message:\"Admin logged in successfully\", admin :admin})\r\n    } catch (error) {\r\n        res.json({error:error.message, message:\"Internal server error\"})\r\n    }\r\n})\r\n\r\n//Admin can access all the user details\r\n\r\nrouter.get('/getall', async(req,res)=>{\r\n    try {\r\n        const students = await studentModel.find()\r\n        const instructors = await registerModel.find({role:\"instructor\"})\r\n        if(!students){\r\n            res.json({message:\"No Students found in DB\"})\r\n        }\r\n        if(!instructors){\r\n            res.json({message:\"No instructors found in DB\"})\r\n        }\r\n        res.json({students:students, instructors:instructors})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\"})\r\n    }\r\n})\r\n\r\n//Admin can delete a user \r\n\r\nrouter.delete('/deleteuser/:id', async(req,res)=>{\r\n    try {\r\n        const id = req.params.id\r\n        console.log(id)\r\n        const user = await registerModel.deleteOne({_id:id})\r\n        const student = await studentModel.deleteOne({_id:id})\r\n        res.json({message:\"user\", user, student:student})\r\n    } catch (error) {\r\n        res.status(500).json({message:\"Internal server error\"})\r\n    }\r\n})\r\nmodule.exports = router"]}