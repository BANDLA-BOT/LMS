{"version":3,"sources":["student.js"],"names":["router","require","Router","validate","jwt","registerModel","courseModel","_req$body","email","password","student","token","regeneratorRuntime","async","_context","prev","next","req","body","awrap","findOne","role","sent","sign","user","username","process","env","SECRET_KEY","expiresIn","res","json","message","t0","error","stop","post","_req$params","courseId","userId","course","_context2","params","findById","abrupt","courseDetails","push","_id","save","status","err","get","_context3","find","put","_req$body2","id","_context4","updateOne","$set","module","exports"],"mappings":"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","file":"student.min.js","sourcesContent":["const router = require(\"express\").Router();\r\nconst validate = require('../config/verifyToken.js')\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst {\r\n  registerModel,\r\n  courseModel,\r\n} = require(\"../models/registrationModel.js\");\r\n\r\n\r\n\r\nrouter.post(\"/login\", async (req, res, next) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const student = await registerModel.findOne({\r\n      email: email,\r\n      password: password,\r\n      role: \"student\",\r\n    });\r\n    if (student) {\r\n      const token = jwt.sign({\r\n        user: {\r\n          username: student.username,\r\n          email: student.email,\r\n          id: student._id,\r\n          role: student.role,\r\n        },\r\n      },\r\n      process.env.SECRET_KEY,{expiresIn:\"3m\"}\r\n    );\r\n\r\n      res.json({ message: \"Student logged in successfully\", student, token:token });\r\n    } else if (!student) {\r\n      res.json({ message: \"No student found\" });\r\n    }\r\n  } catch (error) {\r\n    res.json({ message: \"Error while login\", error });\r\n  }\r\n});\r\nrouter.post(\"/course/:courseId/:userId\", async (req, res) => {\r\n  try {\r\n    const {courseId,userId} = req.params\r\n    const user = await registerModel.findById(userId)\r\n    const course = await courseModel.findById(courseId);\r\n    if(!user ||  !course){\r\n      return res.status(400).json ({message:\"User/Course not found \"})\r\n    }\r\n    user.courseDetails.push(course._id)\r\n    await user.save()\r\n    res.status(200).json({message:\"Course added to user \", user})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", err:error.message})\r\n  }\r\n});\r\nrouter.get(\"/profile\", validate, async (req, res) => {\r\n  const course = await courseModel.find();\r\n  res.json({ message: \"fetched\", course });\r\n});\r\nrouter.put(\"/update/:id\", async (req, res) => {\r\n  const { email, password, role,username } = req.body;\r\n  const id = req.params.id;\r\n  const user = await registerModel.updateOne(\r\n    { _id: id },\r\n    { $set: { email: email, password: password, role: role,username:username} }\r\n  );\r\n  res.json({ message: \"updated successfully\", user });\r\n});\r\n\r\nmodule.exports = router;\r\n"]}