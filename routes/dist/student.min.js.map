{"version":3,"sources":["student.js"],"names":["router","require","Router","validate","jwt","registerModel","courseModel","studentModel","_req$body","username","email","password","newStudent","regeneratorRuntime","async","_context","prev","next","req","body","awrap","save","res","json","message","StudenDetails","t0","stop","post","_req$body2","student","token","_context2","sent","sign","user","error","id","_id","profile","process","env","SECRET_KEY","expiresIn","_req$params","courseId","studentId","course","_context3","params","findById","abrupt","status","err","_context5","console","log","find","studentName","studentMail","courses","get","free","paid","_context6","coursetype","FreeCourses","PaidCourses","_req$body3","_context7","updateOne","query","instructor","_context8","q","$or","coursename","$regex","$options","purchases","push","Courses","_req$params2","_context9","wishlist","_defineProperty","_req$user$user","_context10","list","put","_req$params3","completed","_user$user","_context11","findOneAndUpdate","purchases._id","$set","purchases.$.completed","new","filter","completedCourses","_context12","module","exports"],"mappings":"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","file":"student.min.js","sourcesContent":["const router = require(\"express\").Router();\r\nconst validate = require(\"../config/verifyToken.js\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst {\r\n  registerModel,\r\n  courseModel,\r\n  studentModel,\r\n} = require(\"../models/registrationModel.js\");\r\n\r\n\r\n//student registration\r\n\r\nrouter.post(\"/register\", async (req, res) => {\r\n  try {\r\n    const { username, email, password } = req.body;\r\n    const newStudent = new studentModel({\r\n      username: username,\r\n      password: password,\r\n      email: email,\r\n    });\r\n    await newStudent.save();\r\n    res.json({\r\n      message: \"Student registered successfully \",\r\n      StudenDetails: newStudent,\r\n    });\r\n  } catch (error) {\r\n    res.json({ error: error.message });\r\n  }\r\n});\r\n\r\n//user login\r\n\r\nrouter.post(\"/login\", async (req, res, next) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n\r\n    const student = await studentModel.findOne({\r\n      email: email,\r\n      password: password,\r\n    });\r\n    if (student) {\r\n      const token = jwt.sign(\r\n        {\r\n          user: {\r\n            username: student.username,\r\n            email: student.email,\r\n            password: student.password,\r\n            id: student._id,\r\n            profile: student.profile,\r\n          },\r\n        },\r\n        process.env.SECRET_KEY,\r\n        { expiresIn: \"1h\" }\r\n      );\r\n\r\n      res.json({\r\n        message: \"Student logged in successfully\",\r\n        student,\r\n        token: token,\r\n      });\r\n    } else if (!student) {\r\n      res.json({ message: \"No student found\" });\r\n    }\r\n  } catch (error) {\r\n    res.json({ message: \"Error while login\", error });\r\n  }\r\n});\r\n\r\n//purchase courses\r\n\r\nrouter.post(\"/purchase/:courseId/:studentId\", validate, async (req, res) => {\r\n  try {\r\n    const { courseId, studentId } = req.params;\r\n    const student = await studentModel.findById(studentId);\r\n    // console.log(student);\r\n    const course = await courseModel.findById(courseId);\r\n    console.log(course)\r\n    if (!student || !course) {\r\n      return res.status(400).json({ message: \"User/Course not found \" });\r\n    }\r\n    student.purchases.push(course);\r\n    await student.save();\r\n    res.status(200).json({ message: \"Course added to user \", student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", err: error.message });\r\n  }\r\n});\r\nrouter.get('/purchases/:studentId', async(req,res)=>{\r\n  try {\r\n    const student = await studentModel.findById(req.params.studentId, 'purchases')\r\n    if(!student){\r\n      res.json({message:\"No courses in the purchased list\"})\r\n    }\r\n    res.json({message:\"Your Purchases are\", course: student})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error \"})\r\n  }\r\n \r\n\r\n})\r\n\r\n// user profile\r\n\r\nrouter.get(\"/profile\", validate, async (req, res) => {\r\n  const user = req.user;\r\n  console.log(user);\r\n  const course = await courseModel.find();\r\n  res.json({ message: \"Courses available are\",  studentName: user.user.username, studentMail:user.user.email, courses: course, });\r\n});\r\n\r\n//categories\r\n\r\nrouter.get(\"/categories\", validate, async (req, res) => {\r\n  const user = req.user;\r\n  console.log(user);\r\n  const free = await courseModel.find({ coursetype: \"free\" });\r\n  const paid = await courseModel.find({ coursetype: \"paid\" });\r\n  res.json({\r\n    message: \"fetched\",\r\n    user: user,\r\n    FreeCourses: free,\r\n    PaidCourses: paid,\r\n  });\r\n});\r\n\r\n//update user details\r\n\r\nrouter.put(\"/update/:id\", async (req, res) => {\r\n  const { email, password, username } = req.body;\r\n  const id = req.params.id;\r\n  const user = await studentModel.updateOne(\r\n    { _id: id },\r\n    { $set: { email: email, password: password, username: username } }\r\n  );\r\n  res.json({ message: \"updated successfully\", user });\r\n});\r\n\r\n//search & filter\r\n\r\nrouter.get(\"/search/filter\", async (req, res) => {\r\n  try {\r\n    const query = req.query.q;\r\n    const course = await courseModel.find({\r\n      $or: [\r\n        { coursename: { $regex: query, $options: \"i\" } },\r\n        {coursetype:{ $regex: query, $options: 'i'}},\r\n      ],\r\n    });\r\n    const instructor = await registerModel.find({\r\n      $or: [{ username: { $regex: query, $options: \"i\" } }],\r\n    });\r\n    res.json({\r\n      message: \"found results\",\r\n      Courses: course,\r\n      instructor: instructor,\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error While searching\", error });\r\n  }\r\n});\r\n\r\n//wishlist creation\r\n\r\nrouter.post(\"/wishlist/:courseId/:studentId\", validate, async (req, res) => {\r\n  try {\r\n    const { courseId, studentId } = req.params;\r\n    const student = await studentModel.findById({ _id: studentId });\r\n    const course = await courseModel.findById({ _id: courseId });\r\n    console.log(student, course);\r\n    student.wishlist.push(course);\r\n    await student.save();\r\n    res.json({ message: \"wishlist created \", student: student });\r\n  } catch (error) {\r\n    res.json({\r\n      error: error.message,\r\n      error: \"Error occured while creating wishlist\",\r\n    });\r\n  }\r\n});\r\n\r\n//get all wishList\r\n\r\nrouter.get(\"/getwishlist\", validate, async (req, res) => {\r\n  const { email, password } = req.user.user;\r\n  const student = await studentModel.find({ email: email, password: password }, 'wishlist');\r\n  console.log(student)\r\n  try {\r\n    if (!student) {\r\n      res.json({ message: \"There are no courses in your wishlist\" });\r\n    }\r\n    res.json({ message: \"Wishlist found\", list: student});\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\"})\r\n  }\r\n});\r\n\r\n\r\n//certification\r\n\r\nrouter.put(\"/certification/:courseId/:completed\", validate, async (req, res) => {\r\n  const{ courseId,completed} = req.params\r\n  const user = req.user\r\n  const {email, password} = user.user\r\n  try {\r\n    const student = await studentModel.findOneAndUpdate(\r\n      { email: user.user.email,password:user.user.password, 'purchases._id': courseId },\r\n      { $set: { 'purchases.$.completed': completed } },\r\n      { new: true }\r\n    );\r\n    if (!student) {\r\n      return res.status(404).json({ message: 'Student or course not found' });\r\n    }\r\n    res.json(student);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message});\r\n  }\r\n});\r\n\r\n\r\n//get certificate\r\n\r\n\r\nrouter.get('/getcertificate/:studentId', validate, async(req,res)=>{\r\n  try {\r\n    const student = await studentModel.findById({_id:req.params.studentId})\r\n    if(!student){\r\n      return res.status(404).json({ message: 'Student not found' });\r\n    }\r\n    const completedCourses = student.purchases.filter(purchases => purchases.completed);\r\n    res.json({message:\"Courses Completed are\", courses:completedCourses})\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error fetching', error });\r\n  }\r\n})\r\n\r\nmodule.exports = router;\r\n"]}