{"version":3,"sources":["student.js"],"names":["router","require","Router","validate","path","jwt","registerModel","courseModel","studentModel","multer","diskStorage","destination","req","file","cb","filename","Date","now","extname","originalname","upload","storage","res","_req$body","username","email","password","profile","newStudent","regeneratorRuntime","async","_context","prev","next","body","post","awrap","save","json","message","t0","stop","_req$body2","student","token","_context2","findOne","StudenDetails","sent","sign","user","error","id","_id","process","env","SECRET_KEY","expiresIn","_req$params","courseId","studentId","course","_context3","params","findById","console","log","abrupt","push","status","err","get","_context4","find","courses","free","paid","_context5","coursetype","FreeCourses","PaidCourses","put","_req$body3","_context6","updateOne","$set","query","instructor","_context7","q","$options","$or","$regex","Courses","_req$params2","_context8","_defineProperty","_req$user$user","_context9","wishlist","length","list","_req$params3","completed","_user$user","_context10","findOneAndUpdate","purchases._id","purchases.$.completed","completedPurchases","_context11","aggregate","$unwind","purchases.completed","$group","$first","$push","module","exports"],"mappings":"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","file":"student.min.js","sourcesContent":["const router = require(\"express\").Router();\r\nconst validate = require(\"../config/verifyToken.js\");\r\nconst path = require(\"path\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst {\r\n  registerModel,\r\n  courseModel,\r\n  studentModel,\r\n} = require(\"../models/registrationModel.js\");\r\n\r\n//multer to upload profile picture\r\n\r\nconst multer = require(\"multer\");\r\n\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, \"public/profile\");\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, Date.now() + \"-\" + path.extname(file.originalname));\r\n  },\r\n});\r\nconst upload = multer({\r\n  storage: storage,\r\n}).single(\"profile\");\r\n\r\n//student registration\r\n\r\nrouter.post(\"/register\", upload, async (req, res) => {\r\n  try {\r\n    const { username, email, password } = req.body;\r\n    const profile = req.file.profile;\r\n    const newStudent = new studentModel({\r\n      username: username,\r\n      password: password,\r\n      email: email,\r\n      profile: profile,\r\n    });\r\n    await newStudent.save();\r\n    res.json({\r\n      message: \"Student registered successfully \",\r\n      StudenDetails: newStudent,\r\n    });\r\n  } catch (error) {\r\n    res.json({ error: error.message });\r\n  }\r\n});\r\n\r\n//user login\r\n\r\nrouter.post(\"/login\", async (req, res, next) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const student = await studentModel.findOne({\r\n      email: email,\r\n      password: password,\r\n    });\r\n    if (student) {\r\n      const token = jwt.sign(\r\n        {\r\n          user: {\r\n            username: student.username,\r\n            email: student.email,\r\n            password: student.password,\r\n            id: student._id,\r\n            profile: student.profile,\r\n          },\r\n        },\r\n        process.env.SECRET_KEY,\r\n        { expiresIn: \"1h\" }\r\n      );\r\n\r\n      res.json({\r\n        message: \"Student logged in successfully\",\r\n        student,\r\n        token: token,\r\n      });\r\n    } else if (!student) {\r\n      res.json({ message: \"No student found\" });\r\n    }\r\n  } catch (error) {\r\n    res.json({ message: \"Error while login\", error });\r\n  }\r\n});\r\n\r\n//purchase courses\r\n\r\nrouter.post(\"/purchase/:courseId/:studentId\", validate, async (req, res) => {\r\n  try {\r\n    const { courseId, studentId } = req.params;\r\n    const student = await studentModel.findById(studentId);\r\n    console.log(student);\r\n    const course = await courseModel.findById(courseId);\r\n    if (!student || !course) {\r\n      return res.status(400).json({ message: \"User/Course not found \" });\r\n    }\r\n    student.purchases.push(course);\r\n    await student.save();\r\n    res.status(200).json({ message: \"Course added to user \", student });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Internal server error\", err: error.message });\r\n  }\r\n});\r\n\r\n// user profile\r\n\r\nrouter.get(\"/profile\", validate, async (req, res) => {\r\n  const user = req.user;\r\n  console.log(user);\r\n  const course = await courseModel.find();\r\n  res.json({ message: \"Courses available are\", courses: course });\r\n});\r\n\r\n//categories\r\n\r\nrouter.get(\"/categories\", validate, async (req, res) => {\r\n  const user = req.user;\r\n  console.log(user);\r\n  const free = await courseModel.find({ coursetype: \"free\" });\r\n  const paid = await courseModel.find({ coursetype: \"paid\" });\r\n  res.json({\r\n    message: \"fetched\",\r\n    user: user,\r\n    FreeCourses: free,\r\n    PaidCourses: paid,\r\n  });\r\n});\r\n\r\n//update user details\r\n\r\nrouter.put(\"/update/:id\", async (req, res) => {\r\n  const { email, password, username } = req.body;\r\n  const id = req.params.id;\r\n  const user = await registerModel.updateOne(\r\n    { _id: id },\r\n    { $set: { email: email, password: password, username: username } }\r\n  );\r\n  res.json({ message: \"updated successfully\", user });\r\n});\r\n\r\n//search & filter\r\n\r\nrouter.get(\"/search/filter\", async (req, res) => {\r\n  try {\r\n    const query = req.query.q;\r\n    const course = await courseModel.find({\r\n      $or: [{ coursename: { $regex: query, $options: \"i\" } }],\r\n    });\r\n    const instructor = await registerModel.find({\r\n      $or: [{ username: { $regex: query, $options: \"i\" } }],\r\n    });\r\n    res.json({\r\n      message: \"found results\",\r\n      Courses: course,\r\n      instructor: instructor,\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error While searching\", error });\r\n  }\r\n});\r\n\r\n//wishlist creation\r\n\r\nrouter.post(\"/wishlist/:courseId/:studentId\", validate, async (req, res) => {\r\n  try {\r\n    const { courseId, studentId } = req.params;\r\n    const student = await studentModel.findById({ _id: studentId });\r\n    const course = await courseModel.findById({ _id: courseId });\r\n    console.log(student, course);\r\n    student.wishlist.push(course);\r\n    await student.save();\r\n    res.json({ message: \"wishlist created \", student: student });\r\n  } catch (error) {\r\n    res.json({\r\n      error: error.message,\r\n      error: \"Error occured while creating wishlist\",\r\n    });\r\n  }\r\n});\r\n\r\n//get all wishList\r\n\r\nrouter.get(\"/getwishlist\", validate, async (req, res) => {\r\n  const { email, password } = req.user.user;\r\n  const student = await studentModel.find({ email: email, password: password });\r\n  try {\r\n    if (!student[0].wishlist.length) {\r\n      res.json({ message: \"There are no courses in your wishlist\" });\r\n    }\r\n    res.json({ message: \"Wishlist found\", list: student[0].wishlist });\r\n  } catch (error) {}\r\n});\r\n\r\n//certification\r\n\r\nrouter.put(\"/certification/:courseId/:completed\", validate, async (req, res) => {\r\n  const{ courseId,completed} = req.params\r\n  const user = req.user\r\n  const {email, password} = user.user\r\n  try {\r\n    const student = await studentModel.findOneAndUpdate(\r\n      { email: user.user.email,password:user.user.password, 'purchases._id': courseId },\r\n      { $set: { 'purchases.$.completed': completed } },\r\n      { new: true }\r\n    );\r\n    if (!student) {\r\n      return res.status(404).json({ message: 'Student or course not found' });\r\n    }\r\n    res.json(student);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n});\r\nrouter.get('/getcertificate', validate, async(req,res)=>{\r\n  try {\r\n    const completedPurchases = await studentModel.aggregate([\r\n      { $unwind: '$purchases' },\r\n      { $match: { 'purchases.completed': true } },\r\n      {\r\n        $group: {\r\n          _id: '$_id',\r\n          email: { $first: '$email' },\r\n          username: { $first: '$username' },\r\n          completedPurchases: { $push: '$purchases' }\r\n        }\r\n      }\r\n    ]);\r\n    res.json(completedPurchases);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error fetching completed purchases', error });\r\n  }\r\n\r\n  // const user = req.user\r\n  // const student = await studentModel.find({email:user.user.email, password:user.user.password})\r\n  // const isCompleted = student.purchases.completed\r\n  // try {\r\n  //   if(isCompleted){\r\n  //     const course = student[0].purchases\r\n  //     res.json({message:\"You can access certificate\", username:user.user.username, email:user.user.email,})\r\n  //   }\r\n  //   res.json({message:\"You cannot Access certificate\"})\r\n  // } catch (error) {\r\n    \r\n  // }\r\n})\r\n\r\nmodule.exports = router;\r\n"]}