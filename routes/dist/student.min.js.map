{"version":3,"sources":["student.js"],"names":["router","require","Router","validate","path","jwt","registerModel","courseModel","wishlistModel","multer","post","req","res","_req$body","email","password","student","token","regeneratorRuntime","async","_context","prev","next","awrap","role","sent","sign","user","username","id","_id","profile","SECRET_KEY","expiresIn","json","message","t0","error","stop","_req$params","courseId","userId","course","_context2","findById","process","abrupt","status","err","get","_context3","console","log","find","courses","free","paid","_context4","coursetype","FreeCourses","PaidCourses","put","_req$body2","_context5","body","params","updateOne","$set","query","instructor","_context6","q","$or","coursename","$regex","$options","Courses","wishlist","_context7","purchases","push","list","save","_defineProperty","wishList","_context8","_context9","findOne","module","exports"],"mappings":"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","file":"student.min.js","sourcesContent":["const router = require(\"express\").Router();\r\nconst validate = require('../config/verifyToken.js')\r\nconst path = require('path')\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst {\r\n  registerModel,\r\n  courseModel,\r\n  wishlistModel,\r\n} = require(\"../models/registrationModel.js\");\r\nconst multer = require(\"multer\");\r\n\r\n\r\nrouter.post(\"/login\", async (req, res, next) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const student = await registerModel.findOne({\r\n      email: email,\r\n      password: password,\r\n      role: \"student\",\r\n    });\r\n    if (student) {\r\n      const token = jwt.sign({\r\n        user: {\r\n          username: student.username,\r\n          email: student.email,\r\n          id: student._id,\r\n          profile:student.profile,\r\n          role: student.role,\r\n        },\r\n      },\r\n      process.env.SECRET_KEY,{expiresIn:\"1h\"}\r\n    );\r\n\r\n      res.json({ message: \"Student logged in successfully\", student, token:token });\r\n    } else if (!student) {\r\n      res.json({ message: \"No student found\" });\r\n    }\r\n  } catch (error) {\r\n    res.json({ message: \"Error while login\", error });\r\n  }\r\n});\r\n\r\nrouter.post(\"/purchase/:courseId/:userId\", validate, async (req, res) => {\r\n  try {\r\n    const {courseId,userId} = req.params\r\n    const user = await registerModel.findById(userId)\r\n    const course = await courseModel.findById(courseId);\r\n    if(!user ||  !course){\r\n      return res.status(400).json ({message:\"User/Course not found \"})\r\n    }\r\n    user.purchases.push(course)\r\n    await user.save()\r\n    res.status(200).json({message:\"Course added to user \", user})\r\n  } catch (error) {\r\n    res.status(500).json({message:\"Internal server error\", err:error.message})\r\n  }\r\n});\r\n\r\n\r\nrouter.get(\"/profile\", validate, async (req, res) => {\r\n  const user = req.user\r\n  console.log(user)\r\n  const course = await courseModel.find()\r\n  res.json({message:\"Courses available are\", courses:course})\r\n});\r\n\r\nrouter.get('/categories', validate, async(req,res)=>{\r\n  const user = req.user\r\n  console.log(user)\r\n  const free = await courseModel.find({coursetype:'free'});\r\n  const paid = await courseModel.find({coursetype:\"paid\"})\r\n  res.json({ message: \"fetched\",user:user, FreeCourses:free, PaidCourses:paid });\r\n})\r\n\r\nrouter.put(\"/update/:id\", async (req, res) => {\r\n  const { email, password,username } = req.body;\r\n  const id = req.params.id;\r\n  const user = await registerModel.updateOne(\r\n    { _id: id },\r\n    { $set: { email: email, password: password,username:username} }\r\n  );\r\n  res.json({ message: \"updated successfully\", user });\r\n});\r\n\r\nrouter.get('/search/filter',async(req,res)=>{\r\n  try {\r\n      const query = req.query.q;\r\n      const course = await courseModel.find({\r\n          $or: [\r\n              { coursename: { $regex: query, $options: 'i' }},\r\n          ]\r\n      });\r\n      const instructor = await registerModel.find({\r\n          $or:[\r\n              {username:{$regex:query, $options:'i'}}\r\n          ]\r\n      })\r\n      res.json({message:\"found results\", Courses:course,instructor:instructor});\r\n  } catch (error) {\r\n      res.status(500).json({ message: 'Error While searching', error });\r\n  }\r\n})\r\n\r\n//wishlist\r\n\r\nrouter.post('/wishlist/:Id', validate, async(req,res)=>{\r\n  try {\r\n    const user = req.user\r\n    console.log(user.user.username)\r\n    const _id = req.params.Id\r\n    const course = await courseModel.findById({_id:_id})\r\n    console.log(course)\r\n    const wishlist = new wishlistModel({\r\n        list:course,\r\n        studentUsername:user.user.username,\r\n        studentEmail:user.user.email,\r\n        studentId:user.user.id\r\n    })\r\n    await wishlist.save()\r\n    res.json({message:\"wishlist created \", wishlist:wishlist})\r\n  } catch (error) {\r\n    res.json({error:error.message, error:\"Error occured while creating wishlist\"})\r\n  }\r\n})\r\nrouter.get('/getwishlist', validate, async(req,res)=>{\r\n  const wishList = await wishlistModel.find()\r\n  res.json({wishlist:wishList})\r\n})\r\nrouter.get('/certification', validate, async(req,res)=>{\r\n    const user = req.user\r\n    console.log(user)\r\n    const username = user.user.username\r\n    const email = user.user.email\r\n    console.log(username)\r\n    console.log(email)\r\n    const student = await registerModel.findOne({email:email, username:username})\r\n    console.log(student.purchases)\r\n})\r\n\r\n\r\nmodule.exports = router;\r\n"]}