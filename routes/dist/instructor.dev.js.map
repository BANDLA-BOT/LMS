{"version":3,"sources":["instructor.js"],"names":["express","require","registerModel","courseModel","mongoose","router","Router","post","req","res","next","body","email","password","findOne","role","instructor","console","log","json","message","coursename","coursetype","courseduration","create","then","result","course","err","createCourse","get","find","courses","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;eACwBA,OAAO,CAAC,gCAAD,C;IAAxBC,a,YAAAA,a;;gBACeD,OAAO,CAAC,gCAAD,C;IAAtBE,W,aAAAA,W;;AACP,IAAMC,QAAQ,GAAGH,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMI,MAAM,GAAGL,OAAO,CAACM,MAAR,EAAf,C,CAEA;;AAEAD,MAAM,CAACE,IAAP,CAAY,QAAZ,EAAsB,iBAAMC,GAAN,EAAUC,GAAV,EAAcC,IAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACOF,GAAG,CAACG,IADX,EACZC,KADY,aACZA,KADY,EACLC,QADK,aACLA,QADK;AAAA;AAAA,0CAEMX,aAAa,CAACY,OAAd,CAAsB;AAACF,YAAAA,KAAK,EAACA,KAAP;AAAcC,YAAAA,QAAQ,EAACA,QAAvB;AAAgCE,YAAAA,IAAI,EAAC;AAArC,WAAtB,CAFN;;AAAA;AAEbC,UAAAA,UAFa;AAGnBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;;AACA,cAAGA,UAAH,EAAc;AACbP,YAAAA,GAAG,CAACU,IAAJ,CAAS;AAACC,cAAAA,OAAO,EAAC,sBAAT;AAAiCJ,cAAAA,UAAU,EAAVA;AAAjC,aAAT;AACA,WAFD,MAGK,IAAG,CAACA,UAAJ,EAAe;AACnBP,YAAAA,GAAG,CAACU,IAAJ,CAAS;AAACC,cAAAA,OAAO,EAAC;AAAT,aAAT;AACA;;AATkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB,E,CAYA;;AAEAf,MAAM,CAACE,IAAP,CAAY,SAAZ,EAAsB,kBAAMC,GAAN,EAAUC,GAAV,EAAcC,IAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uBACgCF,GAAG,CAACG,IADpC,EACVU,UADU,cACVA,UADU,EACEC,UADF,cACEA,UADF,EACcC,cADd,cACcA,cADd;AAAA;AAAA,0CAESpB,WAAW,CAACqB,MAAZ,CAAmB;AAC1CH,YAAAA,UAAU,EAACA,UAD+B;AAE1CC,YAAAA,UAAU,EAAEA,UAF8B;AAG1CC,YAAAA,cAAc,EAACA;AAH2B,WAAnB,EAK1BE,IAL0B,CAKrB,UAACC,MAAD,EAAY;AACVjB,YAAAA,GAAG,CAACU,IAAJ,CAAS;AAACC,cAAAA,OAAO,EAAC,6BAAT;AAAwCO,cAAAA,MAAM,EAACD;AAA/C,aAAT;AACP,WAP0B,WAOlB,UAACE,GAAD,EAAS;AACdX,YAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACH,WAT0B,CAFT;;AAAA;AAEZC,UAAAA,YAFY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;AAaAxB,MAAM,CAACyB,GAAP,CAAW,aAAX,EAA0B,kBAAMtB,GAAN,EAAUC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACAN,WAAW,CAAC4B,IAAZ,EADA;;AAAA;AAChBC,UAAAA,OADgB;AAEtBvB,UAAAA,GAAG,CAACU,IAAJ,CAAS;AAACC,YAAAA,OAAO,EAAE,2CAAV;AAAuDY,YAAAA,OAAO,EAACA;AAA/D,WAAT;;AAFsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;AAMAC,MAAM,CAACC,OAAP,GAAiB7B,MAAjB","sourcesContent":["const express = require('express');\r\nconst {registerModel} = require('../models/registrationModel.js')\r\nconst {courseModel} = require('../models/registrationModel.js')\r\nconst mongoose = require('mongoose')\r\nconst router = express.Router();\r\n\r\n//Instructor login\r\n\r\nrouter.post('/login', async(req,res,next)=>{\r\n   const {email, password} = req.body\r\n   const instructor = await registerModel.findOne({email:email, password:password,role:\"instructor\"})\r\n   console.log(instructor)\r\n   if(instructor){\r\n    res.json({message:\"Instructor logged in\", instructor})\r\n   }\r\n   else if(!instructor){\r\n    res.json({message:\"failed login\"})\r\n   }\r\n})\r\n\r\n//Courses creation by instructor\r\n\r\nrouter.post('/create',async(req,res,next)=>{\r\n    const { coursename, coursetype, courseduration} = req.body\r\n    const createCourse = await courseModel.create({\r\n        coursename:coursename,\r\n        coursetype :coursetype,\r\n        courseduration:courseduration\r\n    })\r\n    .then((result) => {\r\n            res.json({message:\"Course created successfully\", course:result})\r\n    }).catch((err) => {\r\n        console.log(err)\r\n    });\r\n})\r\nrouter.get('/allCourses', async(req,res)=>{\r\n    const courses = await courseModel.find()\r\n    res.json({message: \"All the courses available in the DATABASE\", courses:courses})\r\n})\r\n\r\n\r\nmodule.exports = router"],"file":"instructor.dev.js"}